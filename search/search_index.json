{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Richard Tan's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Let's set up a dev container in Rust!","text":"<ul> <li>Primary author: Richard Tan</li> <li>Reviewer: Daniel Zhang</li> </ul>"},{"location":"tutorials/rust-setup/#rust-introduction","title":"Rust Introduction:","text":"<p>Rust is a modern programming language created in 2012 to help creating more reliable software. It helps you write faster and control low-level details without many the traditional hassles you can think of. </p>"},{"location":"tutorials/rust-setup/#installs","title":"Installs","text":"<p>1. Install VS Code 2. Install Git 3. Install Docker</p>"},{"location":"tutorials/rust-setup/#steps","title":"Steps","text":"<ol> <li>On your machine, create a folder in your linux terminal: </li> </ol> <p><code>mkdir RustExample</code> <code>cd RustExample</code></p> <pre><code>To initialize a new git repository, use 'git init'. Follow the following code to make a README file in the new repository:\n</code></pre> <p><code>echo \"# Rust Hello World Example by Richard\" &gt; README.md</code> <code>git add README.md</code> <code>git commit -m \"README commit\"</code></p> <ol> <li>Use File -&gt; Open to the files in VSCode.</li> <li> <p>Create a folder named \".devcontainer\" and add a devcontainer.json file in it. Include the following: <pre><code>{\n    \"name\": \"RustExample\",\n    \"image\": \"mcr.microsoft.com/vscode/devcontainers/rust:latest\",\n    \"customizations\": {\n      \"extensions\": [\"rust-lang.rust-analyzer\"]\n    }\n}\n</code></pre> Explanation:      The new dev container .json file tells the container what needs to be setup. In this file, you give it a name (RustExample), install the latest image of Rust, and add a rust analyzer extension</p> </li> <li> <p>In the .json file, press Ctrl+Shift+P and select option \"Dev Containers: Rebuild &amp; Reopen Container( Docker must be running for this to work.)</p> </li> <li> <p>When the dev container opens, launch a terminal and use <code>rustc --version</code> to check if you have currently installed latest version of Rust</p> </li> <li> <p>Run  <code>cargo new hello --vcs none</code>. This creates a new hello folder in your container.</p> </li> <li> <p>Switch to the new hello folder <code>cd hello</code>, go to src -&gt; main.rs file. Edit to the following code: <pre><code>fn main() {\n    println!(\"Hello, COMP423!\");\n}\n</code></pre></p> </li> <li> <p>Run <code>cargo build</code>. </p> </li> <li>Run <code>./target/debug/hello</code> to execute the file. If everything works successfully, you should see this:  <pre><code>Hello, COMP423!\n</code></pre> If not, return to main.rs file and double-check your code.</li> <li>You can also use <code>cargo run</code> from the hello subdirectory to compile and run the program in 1 step  </li> </ol>"},{"location":"tutorials/rust-setup/#side-note","title":"Side Note:","text":"<pre><code>_`run` compiles and executes the program immediately, while `build` compiles but doesn't execute the program. Instead, a binary executable file is created to be executed independently._\n</code></pre>"},{"location":"tutorials/rust-setup/#closing-note-when-finished-dont-forget-your-files-using-git-commands-thank-you-for-following-along","title":"Closing Note: When finished, don't forget your files using Git commands. Thank you for following along!","text":""}]}